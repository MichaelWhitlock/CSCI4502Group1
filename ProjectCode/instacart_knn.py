# -*- coding: utf-8 -*-
"""Instacart KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SMM2ywcophrDOvk_PsQAW7u4-C6GjFII
"""

import numpy as np
import pandas as pd
from google.colab import drive
drive.mount('/content/drive')
import sklearn.neighbors as neighbors

orders = pd.read_csv('drive/My Drive/Instacart Files/orders.csv')
products = pd.read_csv('drive/My Drive/Instacart Files/products.csv')
aisles = pd.read_csv('drive/My Drive/Instacart Files/aisles.csv')
departments = pd.read_csv('drive/My Drive/Instacart Files/departments.csv')
order_products_train = pd.read_csv('drive/My Drive/Instacart Files/order_products__train.csv')
order_products_prior = pd.read_csv('drive/My Drive/Instacart Files/order_products__prior.csv')

# Create the KNN classifier. 

# I ran this for KNN = 1, 2, 3, and 4. Results are discussed in the 
# accuracy rate code block 

KNNclassifier = neighbors.KNeighborsClassifier(n_neighbors=5, weights='uniform')

# I used this to check the shape of the train sample

# print(order_products_train.head())

# Here I created two variables to hold the product_id + add_to_cart_order attributes
# and a seperate variable to hold the classification attribute (reordered)

# The classifier attempts to predict if an item will be reoredred based on it's
# product id and the order it was placed into the shopping cart


# REVISED - Added aisle_id and department_id


# first, join the products and order_products_train set
combinedProductsOrderDF = pd.merge(order_products_train, products, how='left', 
                                  left_on='product_id', right_on='product_id')

# print to check the merge
# print(combinedProductsOrderDF.head())

# Create the new DF with product_id, add_to_cart_order, 
# aisle_id, and department_id 

idAndCartOrder = combinedProductsOrderDF[['product_id', 'add_to_cart_order',
                                      'aisle_id', 'department_id']]

knnTarget = combinedProductsOrderDF['reordered']

idAndCartOrder = idAndCartOrder.values
knnTarget = knnTarget.values

# Check the arrays

print(idAndCartOrder)
print(knnTarget)

# Fit the classifier
KNNclassifier.fit(idAndCartOrder, knnTarget)

# I created a single sample to check the classifier. The sample is the value from
# the first row of the idAndCartOrder array. The classifier correctly returned 1

sample = np.array([49302, 1, 120, 16])
results = KNNclassifier.predict(sample.reshape(1, -1))
print(results[0])

# Since the prior dataset is very large, I first checked the accuracy rate
# for the train dataset. 


# These are the results: 
# KNN = 1; 0.676 accuracy rate
# KNN = 2; 0.612 accuracy rate
# KNN = 3; 0.681 accuracy rate
# KNN = 4; 0.648 accuracy rate

# Although setting KNN=3 gives the best results, it isn't much better than
# simply leaving KNN=1. 


predictions = KNNclassifier.predict(idAndCartOrder)
print("KNN accuracy rate =", np.sum(predictions == knnTarget) / len(knnTarget))

# Run the classifier on the test dataset
# Be warned! This takes a long time to run (~20 minutes). 

# I only tested for KNN = 1; the result was 0.567 accuracy rate 


TestCombinedProductsOrderDF = pd.merge(order_products_prior, products, how='left', 
                                  left_on='product_id', right_on='product_id')

TestKNNTarget = TestCombinedProductsOrderDF['reordered']

# print to check the merge
# print(combinedProductsOrderDF.head())

# Create the new DF with product_id, add_to_cart_order, 
# aisle_id, and department_id 





TestidAndCartOrder = TestCombinedProductsOrderDF[['product_id', 'add_to_cart_order',
                                              'aisle_id', 'department_id']]

TestKNNTarget = TestCombinedProductsOrderDF['reordered']

# TestidAndCartOrder = TestidAndCartOrder.values
# TestKNNTarget = TestKNNTarget.values

# TestPredictions = KNNclassifier.predict(TestidAndCartOrder)
# np.sum(TestPredictions == TestKNNTarget) / len(TestKNNTarget)


# TestidAndCartOrder = order_products_prior[['product_id', 'add_to_cart_order']]
# TestknnTarget = order_products_prior['reordered']

TestidAndCartOrder = TestidAndCartOrder.values
TestKNNTarget = TestKNNTarget.values

TestPredictions = KNNclassifier.predict(TestidAndCartOrder)
np.sum(TestPredictions == TestKNNTarget) / len(TestKNNTarget)